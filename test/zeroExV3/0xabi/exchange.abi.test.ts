import { contractAbi } from '../../../src/contracts/abi'

import {
  AbiDefinition,
  AbiType,
  BlockParam,
  CallData,
  ConstructorAbi,
  ContractAbi,
  DataItem,
  MethodAbi,
  SupportedProvider,
  TransactionReceiptWithDecodedLogs,
  TxData,
  TxDataPayable
} from 'ethereum-types'
import { DecodingRules,AbiEncoder } from '@txdev/0x-utils'

// batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],uint256[],bytes[]) 0x9694a402
const matchOrderInput = '0x2280c91000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400ca752d74f5aac338829612eb8391c2fb8c9f6f5bd93c2293f1fd3e66831a33ce0000000000000000000000000000000000000000000000000000017fe7406be200000000000000000000000000000000000000000000000000000002540be400000000000000000000000000eb99e7c527284f3ca78b0525b5c3ab30feb71ddd00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002e42da629870000000000000000000000000000000000000000000000000000000000000020000000000000000000000000eb99e7c527284f3ca78b0525b5c3ab30feb71ddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000bcbce7f1b150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017fe7406be256558cbc2e04fe0c16f7e2d0d4507bafe27686230b1c5f1f28b70bff22f3c32e00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000a5f1ea7df861952863df2e8d1312f7305dabf2150000000000000000000000000000000000000000000000000000000000002402000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421c60ef70bfe8552a4aae01e460cb37c7f635620eba217566c7560653558a03c8542d66fa9e1515bef34325aef7ea25b593973e53373be9f178760258bf7dbaf79403000000000000000000000000000000000000000000000000000000000000'

//matchOrders //0xbbbfa60c

const matchOrderSeleter = matchOrderInput.substring(0,10)

const methodAbis = contractAbi.exchange.abi.filter(
  (abiDefinition: AbiDefinition) => abiDefinition.type === AbiType.Function
) as MethodAbi[]

methodAbis.find(methodAbi => {
  const abiEncoder = new AbiEncoder.Method(methodAbi)
  const functionSignature = abiEncoder.getSignature()
  const functionSelector = abiEncoder.getSelector()
  console.log(functionSignature, functionSelector)
  if(matchOrderSeleter ==functionSelector){
    // @ts-ignore
    const rules:DecodingRules = {
      shouldConvertStructsToObjects: true,
      isStrictMode: true
    }
    const decodeList =  abiEncoder.decode(matchOrderInput,rules)
    console.log("\n",decodeList ,"\n")
    return false
  }
  return false
})


// const abiEncodedArguments = abiEncoder.encode(functionArguments);
