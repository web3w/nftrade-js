import { contractAbi } from '../../../src/contracts/abi'

import {
  AbiDefinition,
  AbiType,
  BlockParam,
  CallData,
  ConstructorAbi,
  ContractAbi,
  DataItem,
  MethodAbi,
  SupportedProvider,
  TransactionReceiptWithDecodedLogs,
  TxData,
  TxDataPayable
} from 'ethereum-types'

import { DecodingRules,AbiEncoder } from '@txdev/0x-utils'

// batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],uint256[],bytes[]) 0x9694a402
const matchOrderInput = '0x9694a4020000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000021a43730360d04803cbdfff848c11a563bc0abe700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d056bb17ad4df5593b93a1efc29cb35ba4aa38d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000021b8c0d0564d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000289c6f166d70000000000000000000000000000000000000000000000000000000000062255e020000000000000000000000000000000000000000000000000000017cf7fc1a2300000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000e7e16f2da731265778f87cb8d7850e31b84b7b8600000000000000000000000000000000000000000000000000000000000005db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000021b8c0d0564d0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421c9c0a2f5df3ec834510c6d8777fb4e2f895792ec521b48e56f9e09d75287fb06c3d977149e09ad19bdc48f625f86fdc57ad85781dca956210e001f54cce8870e002000000000000000000000000000000000000000000000000000000000000'

//matchOrders //0xbbbfa60c

const matchOrderSeleter = matchOrderInput.substring(0,10)

const methodAbis = contractAbi.exchange.abi.filter(
  (abiDefinition: AbiDefinition) => abiDefinition.type === AbiType.Function
) as MethodAbi[]

methodAbis.find(methodAbi => {
  const abiEncoder = new AbiEncoder.Method(methodAbi)
  const functionSignature = abiEncoder.getSignature()
  const functionSelector = abiEncoder.getSelector()
  console.log(functionSignature, functionSelector)
  if(matchOrderSeleter ==functionSelector){
    // @ts-ignore
    const rules:DecodingRules = {
      shouldConvertStructsToObjects: true,
      isStrictMode: true
    }
    const decodeList =  abiEncoder.decode(matchOrderInput,rules)
    console.log("\n",decodeList ,"\n")
    return false
  }
  return false
})


// const abiEncodedArguments = abiEncoder.encode(functionArguments);
