import { contractAbi } from '../../../src/contracts/abi'

import {
  AbiDefinition,
  AbiType,
  BlockParam,
  CallData,
  ConstructorAbi,
  ContractAbi,
  DataItem,
  MethodAbi,
  SupportedProvider,
  TransactionReceiptWithDecodedLogs,
  TxData,
  TxDataPayable
} from 'ethereum-types'

import { DecodingRules,AbiEncoder } from '@txdev/0x-utils'

// https://bscscan.com/tx/0xb1d5e5e2ac434cafc2674ca990de59b8a673fe7113e16ecfde7b0c15f209019b
// marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],uint256,bytes[],uint256[],address[]) 0x9e832315
const matchOrderInput = '0x9e83231500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000a56b3317ed60dc4e1027a63ffbe9df6fb10240100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a56b3317ed60dc4e1027a63ffbe9df6fb1024010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967a67f0289c46d27f321cbb61fcd8cf2bb00f5e72017f45b2ef3a36275b0e16f5965f4200000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000066561b3369fa33e56d58c3fce621ff82b4cdd3f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000ae13d989dac2f0debff460ac112a837c89baa7cd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000066561b3369fa33e56d58c3fce621ff82b4cdd3f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000ae13d989dac2f0debff460ac112a837c89baa7cd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421c31274cedc943bdf67b1745557bd4d8959af05e220d57f15fa1b2e708c8d38d7d40f394731d3dda3dfb223ebacc4723ccb7a7ebeb9f25460a9183583780a64673020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000'


const matchOrderSeleter = matchOrderInput.substring(0,10)

const methodAbis = contractAbi.forwarder.abi.filter(
  (abiDefinition: AbiDefinition) => abiDefinition.type === AbiType.Function
) as MethodAbi[]

methodAbis.find(methodAbi => {
  const abiEncoder = new AbiEncoder.Method(methodAbi)
  const functionSignature = abiEncoder.getSignature()
  const functionSelector = abiEncoder.getSelector()
  console.log(functionSignature, functionSelector)
  if(matchOrderSeleter == functionSelector){
    // @ts-ignore
    const rules:DecodingRules = {
      shouldConvertStructsToObjects: true,
      isStrictMode: true
    }
    const decodeList =  abiEncoder.decode(matchOrderInput,rules)
    console.log("\n",decodeList,"\n")

  }
  return false
})


// {
//   orders: [
//     {
//       makerAddress: '0x1a20b32fde1edfab1f84b325379a7c5609abc49b',
//       takerAddress: '0x0000000000000000000000000000000000000000',
//       feeRecipientAddress: '0x0000000000000000000000000000000000000000',
//       senderAddress: '0x0000000000000000000000000000000000000000',
//       makerAssetAmount: 1,
//       takerAssetAmount: 1100000000000000000,
//       makerFee: 0,
//       takerFee: 0,
//       expirationTimeSeconds: 1637220500082,
//       salt: 85456897954558661539617856404932314893034278271174824214870778401177606920180, //ERC721Token(address,uint256) 0x02571792
//       makerAssetData: '0x025717920000000000000000000000004bd2a30435e6624ccdee4c60229250a84a2e4cd600000000000000000000000000000000000000000000000000000000000019af',
//       takerAssetData: '0xf47261b0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c', // ERC20Token(address) 0xf47261b0  // Wrapped BNB (WBNB)
//       makerFeeAssetData: '0x025717920000000000000000000000004bd2a30435e6624ccdee4c60229250a84a2e4cd600000000000000000000000000000000000000000000000000000000000019af',
//       takerFeeAssetData: '0xf47261b0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c'
//     }
//   ],
//     makerAssetBuyAmount: 1,
//   signatures: [
//   '0x1b33b74541fd4f1a7291afa0d70bf48d12ff89906f88bde135514f8203cd1c6bc22c6a2e427f82717b3ec416fb293c5b8875a9a35a76d2450304b86e59d4e581f802'
// ],
//   ethFeeAmounts: [ 0 ],
//   feeRecipients: [ '0x0000000000000000000000000000000000000000' ]
// }
