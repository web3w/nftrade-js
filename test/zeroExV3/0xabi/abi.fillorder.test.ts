import { contractAbi } from '../../../src/contracts/abi'

import {
  AbiDefinition,
  AbiType,
  BlockParam,
  CallData,
  ConstructorAbi,
  ContractAbi,
  DataItem,
  MethodAbi,
  SupportedProvider,
  TransactionReceiptWithDecodedLogs,
  TxData,
  TxDataPayable
} from 'ethereum-types'

import { DecodingRules,AbiEncoder } from '@txdev/0x-utils'

// Function: fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes), uint256, bytes)
// Function: fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes) 0x9b44d556

const matchOrderInput = '0xb4be83d50000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000004c00000000000000000000000002c2c2f6dbe08942280d4f7626b6bad5c11d20215000000000000000000000000594b469ef762fc916c379c84151be9fd8486a15d0000000000000000000000004e2f98c96e2d595a83afa35888c4af58ac343e4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006193e3900000000000000000000000000000000000000000000000000000017d1d40e72b00000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000014494cfcdd7000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004402571792000000000000000000000000bd3531da5cf5857e7cfaa92426877b022e612cf800000000000000000000000000000000000000000000000000000000000006b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012494cfcdd700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000018fae27693b40000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421b5125e625365e02eec83873139340c121120508fe332640b647c3fd70fbb7a44f78d0ed34221e54ceef13a318ab45def617a4ff769783c6468f53484f4a90f32703000000000000000000000000000000000000000000000000000000000000'


const matchOrderSeleter = matchOrderInput.substring(0,10)

const methodAbis = contractAbi.exchange.abi.filter(
  (abiDefinition: AbiDefinition) => abiDefinition.type === AbiType.Function
) as MethodAbi[]

methodAbis.find(methodAbi => {
  const abiEncoder = new AbiEncoder.Method(methodAbi)
  const functionSignature = abiEncoder.getSignature()
  const functionSelector = abiEncoder.getSelector()
  console.log(functionSignature, functionSelector)
  if(matchOrderSeleter ==functionSelector){
    // @ts-ignore
    const rules = {
      shouldConvertStructsToObjects: true,
      isStrictMode: true
    }
    const decodeList =  abiEncoder.decode(matchOrderInput,rules)
    console.log(decodeList)
    return true
  }
  return false
})


// const abiEncodedArguments = abiEncoder.encode(functionArguments);
